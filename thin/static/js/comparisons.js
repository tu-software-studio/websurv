// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var comparison_controller, h1;
    h1 = Array(10).join('#');
    comparison_controller = {
      current_input: null,
      current_input_counter: 0,
      current_group: 1,
      current_row: null,
      align_form_counter: 0,
      loop_through_spans: function() {
        var currentLetters, input, inputCounter, inputs, span, spanCounter, spans, _i, _j, _len, _len1, _results;
        console.log("Grabbing all first letters...");
        inputs = $("div.trans-form");
        spans = $("span.current");
        currentLetters = [];
        inputCounter = 1;
        spanCounter = 1;
        inputs[0].autofocus = true;
        for (_i = 0, _len = inputs.length; _i < _len; _i++) {
          input = inputs[_i];
          input = $(input);
          currentLetters[inputCounter] = input.html()[0];
          input.attr('id', inputCounter);
          inputCounter++;
        }
        _results = [];
        for (_j = 0, _len1 = spans.length; _j < _len1; _j++) {
          span = spans[_j];
          span = $(span);
          span.html(currentLetters[spanCounter]);
          span.parent().parent().attr('id', spanCounter);
          _results.push(spanCounter++);
        }
        return _results;
      },
      set_up_key_listener: function() {
        return $("body").on("keydown", function(e) {
          var element, inputValue, span, tableRow, td, _ref;
          if (comparison_controller.current_input && (_ref = e.which, __indexOf.call([37, 38, 39, 40], _ref) >= 0)) {
            switch (e.which) {
              case 37:
                console.log("" + h1 + "left" + h1);
                if (comparison_controller.current_input_counter > 0) {
                  console.log("Message");
                } else {
                  comparison_controller.current_input_counter -= 1;
                }
                break;
              case 38:
                console.log("" + h1 + "up" + h1);
                if (comparison_controller.current_input_counter < comparison_controller.current_input.html().length) {
                  inputValue = comparison_controller.current_input.html();
                  tableRow = comparison_controller.current_input.parent().parent();
                  console.log("row_children:");
                  console.log(tableRow.children().eq(1).children()[comparison_controller.current_group]);
                  console.log(comparison_controller.current_group);
                  $("#group" + comparison_controller.current_group)[0].value += inputValue[comparison_controller.current_input_counter];
                  comparison_controller.current_input_counter += 1;
                }
                break;
              case 39:
                console.log("" + h1 + "right" + h1);
                console.log("current_input_counter: " + comparison_controller.current_input_counter);
                console.log("current_input: " + (comparison_controller.current_input.html().length));
                console.log("current_group: " + comparison_controller.current_group);
                if (comparison_controller.current_input_counter < comparison_controller.current_input.html().length) {
                  tableRow = comparison_controller.current_input.parent().parent();
                  console.log(tableRow.children().eq(1).children()[comparison_controller.current_group]);
                  console.log;
                  span = tableRow.children().eq(1).children()[comparison_controller.current_group];
                  console.log("tagname: " + span.tagName);
                  if (span.tagName === "SPAN") {
                    console.log("new group");
                    td = $('<td>');
                    element = $('<input>');
                    element.addClass("form-control");
                    element.attr('style', "width: inherit; display: inline-block;");
                    element.attr('id', 'group' + (comparison_controller.current_group + 1));
                    element.attr('disabled', 'disabled');
                    element.insertBefore(span);
                    tableRow.children().eq(tableRow.children().length - 3).append(span);
                    comparison_controller.current_group += 1;
                  } else {
                    comparison_controller.current_input_counter += 1;
                  }
                }
                break;
              case 40:
                console.log("" + h1 + "down" + h1);
                if (comparison_controller.current_input_counter > 0) {
                  inputValue = comparison_controller.current_input.html();
                  tableRow = comparison_controller.current_input.parent().parent();
                  tableRow.children()[comparison_controller.current_group].firstChild.val(tableRow.children()[1].firstChild.val().slice(0, -1));
                  comparison_controller.current_input_counter -= 1;
                }
                break;
            }
            console.log("current_input_counter: " + comparison_controller.current_input_counter);
            return comparison_controller.update_current_cell();
          }
        });
      },
      update_current_cell: function() {
        var inputValue, tableRow;
        console.log("updating cell");
        inputValue = comparison_controller.current_input.html();
        tableRow = comparison_controller.current_input.parent().parent();
        if (inputValue[comparison_controller.current_input_counter] === void 0) {
          return tableRow.children().eq(1).children().eq(comparison_controller.current_group).html("&#x2713;");
        } else {
          return $("#" + comparison_controller.current_row + ".current").html(inputValue[comparison_controller.current_input_counter]);
        }
      },
      set_up_inputs: function() {
        console.log("Adding listeners to inputs for comparison entries...");
        return $("body").on("click", "tr.trans-form", function(e) {
          console.log("setting input to: " + e.target.id);
          comparison_controller.current_input = $(e.target).first();
          comparison_controller.current_row = comparison_controller.current_input.attr('id');
          $("table tr td").attr('style', 'background-color: #86C67C;');
          return comparison_controller.current_input.blur(function() {
            comparison_controller.current_input_counter = 0;
            comparison_controller.current_group = 1;
            comparison_controller.current_row = null;
            comparison_controller.current_input.unbind('blur');
            return comparison_controller.current_input = null;
          });
        });
      }
    };
    comparison_controller.loop_through_spans();
    comparison_controller.set_up_key_listener();
    return comparison_controller.set_up_inputs();
  });

}).call(this);

//# sourceMappingURL=comparisons.map
