// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var comparison_controller, h1;
    h1 = Array(10).join('#');
    comparison_controller = {
      current_input_counter: 0,
      current_group: 0,
      current_row: null,
      current_label: [],
      id_counter: 0,
      align_form_counter: 0,
      set_up_key_listener: function() {
        return $("body").on("keydown", function(e) {
          var rowId, _ref;
          if (_ref = e.which, __indexOf.call([37, 38, 39, 40], _ref) >= 0) {
            switch (e.which) {
              case 37:
                console.log("" + h1 + "left" + h1);
                rowId = comparison_controller.current_row.id;
                if (comparison_controller.within_bounds(rowId, 0, parseInt(comparison_controller.current_label[rowId][0]) - 1)) {
                  comparison_controller.labelify_span(rowId, 0, parseInt(comparison_controller.current_label[rowId][0]) - 1);
                  return comparison_controller.current_label[rowId][0] -= 1;
                }
                break;
              case 38:
                console.log("" + h1 + "up" + h1);
                return e.preventDefault();
              case 39:
                console.log("" + h1 + "right" + h1);
                rowId = comparison_controller.current_row.id;
                if (comparison_controller.within_bounds(rowId, 0, parseInt(comparison_controller.current_label[rowId][0]) + 1)) {
                  comparison_controller.labelify_span(rowId, 0, parseInt(comparison_controller.current_label[rowId][0]) + 1);
                  return comparison_controller.current_label[rowId][0] += 1;
                }
                break;
              case 40:
                console.log("" + h1 + "down" + h1);
                return e.preventDefault();
            }
          }
        });
      },
      within_bounds: function(row, col, idx) {
        var len;
        len = $("#" + row + "-" + col).children().length - 1;
        return idx <= len && idx >= 0;
      },
      loop_through_aligned_forms: function() {
        var aligned_forms, col, colId, letter, letterIndex, row, rowId, s, transcription, transcriptions, _i, _j, _len, _len1, _ref, _results;
        aligned_forms = $("td.aligned-form");
        transcriptions = $("td.transcriptions");
        _results = [];
        for (_i = 0, _len = transcriptions.length; _i < _len; _i++) {
          transcription = transcriptions[_i];
          letterIndex = 0;
          transcription = $(transcription);
          row = transcription.parent();
          col = row.children("td.aligned-form");
          rowId = transcription.parent().attr("id");
          colId = col.attr("id").slice(-1);
          console.log(colId);
          comparison_controller.current_label[rowId] = [];
          comparison_controller.current_label[rowId][0] = 0;
          _ref = transcription.text();
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            letter = _ref[_j];
            letter = $(letter);
            s = $("<span>").html(letter.selector);
            s.attr("id", "" + rowId + "-" + colId + "-" + letterIndex);
            $("tr#" + rowId).children("td.aligned-form").append(s);
            letterIndex++;
          }
          _results.push(comparison_controller.labelify_span(rowId, colId, 0));
        }
        return _results;
      },
      labelify_span: function(row, col, index) {
        var column;
        column = $("#" + row).children("#" + row + "-" + col);
        column.children().removeClass();
        return column.children("#" + row + "-" + col + "-" + index).addClass("label label-info");
      },
      set_up_inputs: function() {
        console.log("Adding listeners to inputs for comparison entries...");
        return $("body").on("click", "tr.trans-form", function(e) {
          console.log(e.target);
          return comparison_controller.current_row = e.target.parentNode;
        });
      },
      add_ids: function() {
        var col, row, rowCounter, rows, _i, _len, _results;
        rowCounter = 0;
        rows = $(".trans-form");
        _results = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          row = $(row);
          comparison_controller.current_label[comparison_controller.id_counter] = comparison_controller.id_counter;
          row.attr("id", "" + comparison_controller.id_counter);
          col = row.children("td.aligned-form");
          col.attr("id", "" + comparison_controller.id_counter + "-0");
          _results.push(comparison_controller.id_counter++);
        }
        return _results;
      },
      add_ids_to_column: function(column_id) {
        var column, span, _i, _len, _results;
        ({
          counter: 0
        });
        column = $("#" + column_number);
        _results = [];
        for (_i = 0, _len = column.length; _i < _len; _i++) {
          span = column[_i];
          span = $(span);
          span.attr("id", "" + counter);
          _results.push(counter++);
        }
        return _results;
      },
      updateSpan: function(aligned_form, index, direction) {}
    };
    comparison_controller.add_ids();
    comparison_controller.loop_through_aligned_forms();
    comparison_controller.set_up_key_listener();
    return comparison_controller.set_up_inputs();
  });

}).call(this);
